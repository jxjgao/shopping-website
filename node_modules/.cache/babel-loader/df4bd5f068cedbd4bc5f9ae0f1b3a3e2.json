{"ast":null,"code":"var _jsxFileName = \"/Users/janeg/Documents/Projects/shopping-website-1/src/containers/MainPage/MainPage.js\";\nimport React, { Component } from 'react';\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\nimport ItemCards from '../../components/ItemCards/ItemCards.js';\nimport Aux from '../../hoc/Aux/Aux';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport Modal from '../../components/UI/Modal/Modal';\nimport MoreInfo from '../../components/MoreInfo/MoreInfo';\n\nclass MainPage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      products: [],\n      itemsInCart: [],\n      totalPrice: 0,\n      viewingMoreInfo: false,\n      currentViewingProductId: 0,\n      isLoaded: false\n    };\n\n    this.addToCartHandler = (id, type) => {\n      //returns product object with specified id\n      return () => {\n        switch (type) {\n          case 'info':\n            NotificationManager.info('Info message');\n            break;\n\n          case 'success':\n            NotificationManager.success('Success message', 'Title here');\n            break;\n\n          case 'warning':\n            NotificationManager.warning('Warning message', 'Close after 3000ms', 3000);\n            break;\n\n          case 'error':\n            NotificationManager.error('Error message', 'Click me!', 5000, () => {\n              alert('callback');\n            });\n            break;\n        }\n\n        const product = this.state.products.find(product => product.id === id);\n        const productPrice = product.price;\n        const currPrice = this.state.totalPrice;\n        const newPrice = currPrice + productPrice;\n        this.setState({\n          totalPrice: newPrice,\n          itemsInCart: this.state.itemsInCart.concat([product])\n        });\n        console.log(this.state.totalPrice, this.state.itemsInCart);\n      };\n    };\n\n    this.moreInfoClickHandler = id => {\n      this.setState({\n        viewingMoreInfo: true,\n        currentViewingProductId: id\n      });\n    };\n\n    this.moreInfoCancelHandler = () => {\n      this.setState({\n        viewingMoreInfo: false\n      });\n    };\n\n    this.createNotificationHandler = type => {\n      return () => {\n        switch (type) {\n          case 'info':\n            NotificationManager.info('Info message');\n            break;\n\n          case 'success':\n            NotificationManager.success('Success message', 'Title here');\n            break;\n\n          case 'warning':\n            NotificationManager.warning('Warning message', 'Close after 3000ms', 3000);\n            break;\n\n          case 'error':\n            NotificationManager.error('Error message', 'Click me!', 5000, () => {\n              alert('callback');\n            });\n            break;\n        }\n      };\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://fakestoreapi.com/products').then(res => res.json()).then(json => {\n      this.setState({\n        products: json,\n        isLoaded: true\n      });\n    });\n  }\n\n  render() {\n    let itemGrid = /*#__PURE__*/React.createElement(ItemCards, {\n      productsList: this.state.products,\n      moreInfo: this.moreInfoClickHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 25\n      }\n    });\n\n    if (this.state.isLoaded === false) {\n      itemGrid = /*#__PURE__*/React.createElement(Spinner, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 24\n        }\n      });\n    }\n\n    let moreInfoSummary = null;\n\n    if (this.state.currentViewingProductId !== 0) {\n      moreInfoSummary = /*#__PURE__*/React.createElement(MoreInfo, {\n        addToCart: this.addToCartHandler,\n        successNotification: this.createNotificationHandler,\n        moreInfoCancel: this.moreInfoCancelHandler,\n        product: this.state.products.find(product => product.id === this.state.currentViewingProductId),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(Aux, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Modal, {\n      show: this.state.viewingMoreInfo,\n      modalClosed: this.moreInfoCancelHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }\n    }, moreInfoSummary), itemGrid, /*#__PURE__*/React.createElement(NotificationContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default MainPage;","map":{"version":3,"sources":["/Users/janeg/Documents/Projects/shopping-website-1/src/containers/MainPage/MainPage.js"],"names":["React","Component","NotificationContainer","NotificationManager","ItemCards","Aux","Spinner","Modal","MoreInfo","MainPage","state","products","itemsInCart","totalPrice","viewingMoreInfo","currentViewingProductId","isLoaded","addToCartHandler","id","type","info","success","warning","error","alert","product","find","productPrice","price","currPrice","newPrice","setState","concat","console","log","moreInfoClickHandler","moreInfoCancelHandler","createNotificationHandler","componentDidMount","fetch","then","res","json","render","itemGrid","moreInfoSummary"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {NotificationContainer, NotificationManager} from 'react-notifications';\n\n\nimport ItemCards from '../../components/ItemCards/ItemCards.js';\nimport Aux from '../../hoc/Aux/Aux';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport Modal from '../../components/UI/Modal/Modal';\nimport MoreInfo from '../../components/MoreInfo/MoreInfo';\n\n\nclass MainPage extends Component {\n    state = {\n        products: [],\n        itemsInCart: [],\n        totalPrice: 0,\n        viewingMoreInfo: false,\n        currentViewingProductId: 0,\n        isLoaded: false\n    }\n\n    componentDidMount() {\n        fetch('https://fakestoreapi.com/products')\n            .then(res => res.json())\n            .then(\n                (json) => {\n                    this.setState({products: json, isLoaded: true});\n                }\n            )\n\n    }\n\n    addToCartHandler = (id, type) => {\n        //returns product object with specified id\n        return () => {\n            switch (type) {\n                case 'info':\n                    NotificationManager.info('Info message');\n                    break;\n                case 'success':\n                    NotificationManager.success('Success message', 'Title here');\n                    break;\n                case 'warning':\n                    NotificationManager.warning('Warning message', 'Close after 3000ms', 3000);\n                    break;\n                case 'error':\n                    NotificationManager.error('Error message', 'Click me!', 5000, () => {\n                    alert('callback');\n                    });\n                    break;\n                }\n\n        const product = this.state.products.find(product => product.id === id)\n         const productPrice = product.price\n         const currPrice = this.state.totalPrice\n         const newPrice = currPrice + productPrice\n         this.setState( {totalPrice: newPrice, itemsInCart: this.state.itemsInCart.concat([product])})\n\n         console.log(this.state.totalPrice, this.state.itemsInCart);\n        }\n         \n    }\n\n    moreInfoClickHandler = (id) => {\n        this.setState({viewingMoreInfo: true, currentViewingProductId: id});\n    }\n\n    moreInfoCancelHandler = () => {\n        this.setState({viewingMoreInfo: false})\n    }\n\n    createNotificationHandler = (type) => {\n        return () => {\n            switch (type) {\n            case 'info':\n                NotificationManager.info('Info message');\n                break;\n            case 'success':\n                NotificationManager.success('Success message', 'Title here');\n                break;\n            case 'warning':\n                NotificationManager.warning('Warning message', 'Close after 3000ms', 3000);\n                break;\n            case 'error':\n                NotificationManager.error('Error message', 'Click me!', 5000, () => {\n                alert('callback');\n                });\n                break;\n            }\n        };\n    }\n\n    render() {\n        let itemGrid =  <ItemCards \n                                productsList={this.state.products} \n                                moreInfo={this.moreInfoClickHandler}\n                                />\n\n        if (this.state.isLoaded === false) {\n            itemGrid = <Spinner />\n        }\n\n        let moreInfoSummary = null;\n\n        if (this.state.currentViewingProductId !== 0) {\n            moreInfoSummary = (\n            <MoreInfo\n                addToCart={this.addToCartHandler}\n                successNotification={this.createNotificationHandler}\n                moreInfoCancel={this.moreInfoCancelHandler}\n                product ={this.state.products.find(product => product.id === this.state.currentViewingProductId)}/>\n            )\n        }\n        return (\n            <Aux>\n                <Modal show={this.state.viewingMoreInfo} modalClosed={this.moreInfoCancelHandler }>\n                    {moreInfoSummary}\n                </Modal>\n                {itemGrid}\n                <NotificationContainer />\n            </Aux>    \n        )\n    }\n}\n\nexport default MainPage"]},"metadata":{},"sourceType":"module"}