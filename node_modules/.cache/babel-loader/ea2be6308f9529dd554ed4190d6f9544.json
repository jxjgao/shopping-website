{"ast":null,"code":"var _jsxFileName = \"/Users/janeg/Documents/Projects/shopping-website-1/src/containers/Cart/ContactData/ContactData.js\";\nimport React, { Component } from 'react';\nimport { store } from 'react-notifications-component';\nimport Button from '../../../components/UI/Button/Button';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport axios from '../../../axio-cart';\nimport Input from '../../../components/UI/Input/Input';\nimport classes from './ContactData.module.css';\n\nclass ContactData extends Component {\n  constructor(props) {\n    super(props);\n\n    this.orderHandler = event => {\n      event.preventDefault();\n      this.setState({\n        isLoaded: false\n      });\n      const formData = {};\n\n      for (let formElementIdentifier in this.state.orderForm) {\n        //example country: Canada\n        formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n      } //name, address, zipCode, country, email, paymentType, product, userID, price\n\n\n      const order = {\n        name: formData.name,\n        address: formData.address,\n        postalCode: formData.postalCode,\n        country: formData.country,\n        email: formData.email,\n        paymentType: formData.paymentMethod,\n        cart: this.props.cart,\n        userID: '5f63e617b29b17b8d1f854a7',\n        price: this.props.price,\n        shippingMethod: formData.shippingMethod\n      };\n      axios.post('/order/create-order', order).then(response => {\n        this.setState({\n          isLoaded: true\n        });\n        axios.put('/cart/5f63e617b29b17b8d1f854a7/clear-cart-by-user-id');\n        this.props.history.push('/home');\n      }).catch(error => {\n        this.setState({\n          isLoaded: true\n        });\n      });\n    };\n\n    this.inputChangedHandler = (event, inputIdentifier) => {\n      const updatedOrderForm = { ...this.state.orderForm\n      };\n      const updatedFormElement = { ...updatedOrderForm[inputIdentifier]\n      };\n      updatedFormElement.value = event.target.value;\n      updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n      updatedFormElement.touched = true;\n      updatedOrderForm[inputIdentifier] = updatedFormElement;\n      let formIsValid = true;\n\n      for (let inputIdentifier in updatedOrderForm) {\n        formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n      }\n\n      this.setState({\n        orderForm: updatedOrderForm,\n        formIsValid: formIsValid\n      });\n    };\n\n    this.createNotification = () => {\n      store.addNotification({\n        message: 'Order Placed Successfully',\n        type: 'success',\n        // 'default', 'success', 'info', 'warning'\n        container: 'top-center',\n        // where to position the notifications\n        animationIn: [\"animated\", \"fadeIn\"],\n        // animate.css classes that's applied\n        animationOut: [\"animated\", \"fadeOut\"],\n        // animate.css classes that's applied\n        dismiss: {\n          duration: 3000\n        }\n      });\n    };\n\n    this.state = {\n      orderForm: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Name'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        address: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Address'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        postalCode: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Postal Code'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        },\n        country: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Country'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'E-Mail'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        paymentMethod: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              displayValue: 'Payment Method'\n            }, {\n              value: 'visa/mc',\n              displayValue: 'Visa/Mastercard'\n            }, {\n              value: 'debit',\n              displayValue: 'Debit Card'\n            }]\n          },\n          value: '',\n          validation: {},\n          valid: true\n        },\n        shippingMethod: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              displayValue: 'Shipping Method'\n            }, {\n              value: 'standard',\n              displayValue: 'Standard Shipping'\n            }, {\n              value: 'expedited',\n              displayValue: 'Expedited Shipping'\n            }]\n          },\n          value: '',\n          validation: {},\n          valid: true\n        }\n      },\n      formIsValid: false,\n      isLoaded: true\n    };\n    this.createNotification = this.createNotification.bind(this);\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n\n    if (!rules) {\n      return true;\n    }\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    if (rules.isNumeric) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    return isValid;\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    let form = /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.orderHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 13\n      }\n    }, formElementsArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      btnType: \"Primary\",\n      disabled: !this.state.formIsValid,\n      clicked: this.createNotification,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 17\n      }\n    }, \"ORDER\"), /*#__PURE__*/React.createElement(Button, {\n      btnType: \"Danger\",\n      onClick: this.props.checkoutCancelled,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 17\n      }\n    }, \"CANCEL\"));\n\n    if (!this.state.isLoaded) {\n      form = /*#__PURE__*/React.createElement(Spinner, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 20\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.ContactData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 17\n      }\n    }, \"Enter your Contact Data\"), form);\n  }\n\n}\n\nexport default ContactData;","map":{"version":3,"sources":["/Users/janeg/Documents/Projects/shopping-website-1/src/containers/Cart/ContactData/ContactData.js"],"names":["React","Component","store","Button","Spinner","axios","Input","classes","ContactData","constructor","props","orderHandler","event","preventDefault","setState","isLoaded","formData","formElementIdentifier","state","orderForm","value","order","name","address","postalCode","country","email","paymentType","paymentMethod","cart","userID","price","shippingMethod","post","then","response","put","history","push","catch","error","inputChangedHandler","inputIdentifier","updatedOrderForm","updatedFormElement","target","valid","checkValidity","validation","touched","formIsValid","createNotification","addNotification","message","type","container","animationIn","animationOut","dismiss","duration","elementType","elementConfig","placeholder","required","minLength","isEmail","options","displayValue","bind","rules","isValid","trim","length","maxLength","pattern","test","isNumeric","render","formElementsArray","key","id","config","form","map","formElement","checkoutCancelled"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {store} from 'react-notifications-component';\n\nimport Button from '../../../components/UI/Button/Button';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport axios from '../../../axio-cart';\nimport Input from '../../../components/UI/Input/Input';\nimport classes from './ContactData.module.css';\n\nclass ContactData extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            orderForm: {\n                name: {\n                    elementType: 'input',\n                    elementConfig: {\n                        type: 'text',\n                        placeholder: 'Name'\n                    },\n                    value: '',\n                    validation: {\n                        required: true\n                    },\n                    valid: false,\n                    touched: false\n                },\n                address: {\n                    elementType: 'input',\n                    elementConfig: {\n                        type: 'text',\n                        placeholder: 'Address'\n                    },\n                    value: '',\n                    validation: {\n                        required: true\n                    },\n                    valid: false,\n                    touched: false\n                },\n                postalCode: {\n                    elementType: 'input',\n                    elementConfig: {\n                        type: 'text',\n                        placeholder: 'Postal Code'\n                    },\n                    value: '',\n                    validation: {\n                        required: true,\n                        minLength: 6,\n                    },\n                    valid: false,\n                    touched: false\n                },\n                country: {\n                    elementType: 'input',\n                    elementConfig: {\n                        type: 'text',\n                        placeholder: 'Country'\n                    },\n                    value: '',\n                    validation: {\n                        required: true\n                    },\n                    valid: false,\n                    touched: false\n                },\n                email: {\n                    elementType: 'input',\n                    elementConfig: {\n                        type: 'email',\n                        placeholder: 'E-Mail'\n                    },\n                    value: '',\n                    validation: {\n                        required: true,\n                        isEmail: true\n                    },\n                    valid: false,\n                    touched: false\n                },\n                paymentMethod: {\n                    elementType: 'select',\n                    elementConfig: {\n                        options: [\n                            {displayValue: 'Payment Method'},\n                            {value: 'visa/mc', displayValue: 'Visa/Mastercard'},\n                            {value: 'debit', displayValue: 'Debit Card'}\n                        ]\n                    },\n                    value: '',\n                    validation: {},\n                    valid: true\n                },\n                shippingMethod: {\n                    elementType: 'select',\n                    elementConfig: {\n                        options: [\n                            {displayValue: 'Shipping Method'},\n                            {value: 'standard', displayValue: 'Standard Shipping'},\n                            {value: 'expedited', displayValue: 'Expedited Shipping'}\n                        ]\n                    },\n                    value: '',\n                    validation: {},\n                    valid: true\n                },\n                \n            },\n            formIsValid: false,\n            isLoaded: true\n        }\n        this.createNotification = this.createNotification.bind(this);\n    }\n\n    orderHandler = ( event ) => {\n        event.preventDefault();\n        this.setState( { isLoaded: false } );\n        const formData = {};\n        for (let formElementIdentifier in this.state.orderForm) {\n            //example country: Canada\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n        }\n        //name, address, zipCode, country, email, paymentType, product, userID, price\n        const order = {\n            name: formData.name,\n            address: formData.address,\n            postalCode: formData.postalCode,\n            country: formData.country,\n            email: formData.email,\n            paymentType: formData.paymentMethod,\n            cart: this.props.cart,\n            userID: '5f63e617b29b17b8d1f854a7',\n            price: this.props.price,\n            shippingMethod: formData.shippingMethod\n        }\n\n        axios.post( '/order/create-order', order )\n            .then( response => {\n                this.setState( { isLoaded: true } );\n                axios.put('/cart/5f63e617b29b17b8d1f854a7/clear-cart-by-user-id');\n                this.props.history.push( '/home' );\n            } )\n            .catch( error => {\n                this.setState( { isLoaded: true } );\n            } );\n    }\n\n    checkValidity(value, rules) {\n        let isValid = true;\n        if (!rules) {\n            return true;\n        }\n        \n        if (rules.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n\n        if (rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid\n        }\n\n        if (rules.maxLength) {\n            isValid = value.length <= rules.maxLength && isValid\n        }\n\n        if (rules.isEmail) {\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        if (rules.isNumeric) {\n            const pattern = /^\\d+$/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        return isValid;\n    }\n\n    inputChangedHandler = (event, inputIdentifier) => {\n        const updatedOrderForm = {\n            ...this.state.orderForm\n        };\n        const updatedFormElement = { \n            ...updatedOrderForm[inputIdentifier]\n        };\n        updatedFormElement.value = event.target.value;\n        updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n        updatedFormElement.touched = true;\n        updatedOrderForm[inputIdentifier] = updatedFormElement;\n        \n        let formIsValid = true;\n        for (let inputIdentifier in updatedOrderForm) {\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n        }\n        this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid});\n    }\n\n    createNotification = () => {\n        store.addNotification({\n            message: 'Order Placed Successfully',\n            type: 'success',                         // 'default', 'success', 'info', 'warning'\n            container: 'top-center',                // where to position the notifications\n            animationIn: [\"animated\", \"fadeIn\"],     // animate.css classes that's applied\n            animationOut: [\"animated\", \"fadeOut\"],   // animate.css classes that's applied\n            dismiss: {\n              duration: 3000\n            }\n          })\n    }\n    \n\n    render () {\n        const formElementsArray = [];\n        for (let key in this.state.orderForm) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.orderForm[key]\n            });\n        }\n        let form = (\n            <form onSubmit={this.orderHandler}>\n                {formElementsArray.map(formElement => (\n                    <Input \n                        key={formElement.id}\n                        elementType={formElement.config.elementType}\n                        elementConfig={formElement.config.elementConfig}\n                        value={formElement.config.value}\n                        invalid={!formElement.config.valid}\n                        shouldValidate={formElement.config.validation}\n                        touched={formElement.config.touched}\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)} />\n                ))}\n                <Button btnType=\"Primary\" disabled={!this.state.formIsValid} clicked={this.createNotification}>ORDER</Button>\n                <Button btnType=\"Danger\" onClick={this.props.checkoutCancelled}>CANCEL</Button>\n            </form>\n        );\n        if ( !this.state.isLoaded ) {\n            form = <Spinner />;\n        }\n        return (\n            <div className={classes.ContactData}>\n                <h4>Enter your Contact Data</h4>\n                {form}\n            </div>\n        );\n    }\n}\n\nexport default ContactData;"]},"metadata":{},"sourceType":"module"}